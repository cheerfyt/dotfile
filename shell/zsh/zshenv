export ZSH=$HOME/.oh-my-zsh


if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='vim'
else
  export EDITOR='mvim'
fi

export SSH_KEY_PATH="~/.ssh/rsa_id"

export PATH=$HOME/go/bin:$PATH

export PATH="$HOME/.cargo/bin:$PATH"

export PATH=/usr/local/openresty/bin:/usr/local/openresty/nginx/sbin:$PATH
export PATH=$PATH:$HOME/.emacs.d/bin
export PATH=$PATH:$HOME/.local/bin
export NVM_DIR=$HOME/.nvm

export PATH=$HOME/Snapshot/maven-3.6.3/bin:$PATH

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

[ -f ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh ] && source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh


## Golang setting
export GO111MODULE=on
export GOPROXY=https://goproxy.cn,direct

# virtualenv
function load_virtual_env() {
	export WORKON_HOME=$HOME/.virtualenvs
	export PROJECT_HOME=$HOME/Python
	export VIRTUALENVWRAPPER_SCRIPT=/usr/local/bin/virtualenvwrapper.sh
    export VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python
	source /usr/local/bin/virtualenvwrapper.sh
}

################################################################################
#################################  prepare programing env ######################
################################################################################
function prepare() {
	echo '=> 1. prepeard editorconfig and prettierr config'
	curl -sL https://raw.githubusercontent.com/cheerfyt/dotfile/master/editor/editorconfig/editorconfig > .editorconfig

	echo '=> 2. prepeard folder'
	result=${PWD##*/}
	echo "### $result" | tee README.md
}

function _go() {
	folder=${PWD##*/}

	mkdir -p cmd/${folder}

	mkdir -p {assets,docs,hack,pkg,config}

	echo '0.0.1' > assets/version

	date=$(date "+%Y-%m-%d %H:%M:%S")

	# Generate the main.go
	cat >${folder}.go <<__EOF__

package main

import (
	"fmt"
)

func main() {
	fmt.Println("hello, ${folder}")
}

__EOF__
	cat >Makefile <<__EOF__
##### ${folder}

VERSION := \$(shell cat assets/version)
USER := \$(shell whoami)

all: run

run:
	@go run ${folder}.go

build:
	@go build -o bin/${folder} ${folder}.go

install: build
	@cp ./bin/${folder} /usr/local/bin

build-image:
	@docker build -t \${USER}/${folder}:\${VERSION} .

__EOF__

	# Generate the Dockerfile
	cat >Dockerfile <<__EOF__
FROM golang:alpine AS builder
ADD . /src
RUN cd /src && go build -o bin/${folder} ${folder}.go

FROM alpine:latest

WORKDIR /app
COPY --from=builder /src/bin/${folder} /app/
ENTRYPOINT [ "/app/${folder}" ]
__EOF__
}

function _node() {
	npm init --yes
	echo 'module.exports = {}' >index.js
}

function _ts() {
	npm init --yes
	mkdir -p src
	npm install typescript ts-node @types/node --save-dev
	./node_modules/.bin/tsc --init
}

function ready() {
	echo "prepare $1 env ..."

	case $1 in
	    go) _go ;;

	    node) _node ;;

	    ts|typescript) _node ;;

	    *) echo "Not support yet" ;;
	esac

    Slang=$1

	content=$(curl -sL https://www.gitignore.io/api/$Slang)

	err=$(echo $content | grep ERROR)

	[[ -z $err ]] && echo "Got ignore content"

	echo $content | tee .gitignore

	prepare

	echo "ready $1 env"
}

function gcb() {
  result=$(git branch -a --color=always | grep -v '/HEAD\s' | sort |
    fzf --height 50% --border --ansi --tac --preview-window right:70% \
      --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1) | head -'$LINES |
    sed 's/^..//' | cut -d' ' -f1)

  if [[ $result != "" ]]; then
    if [[ $result == remotes/* ]]; then
      git checkout --track $(echo $result | sed 's#remotes/##')
    else
      git checkout "$result"
    fi
  fi
}

function dri() {
  result=$(docker images -a | fzf --preview 'echo {} | xargs echo ' | awk '{print $3}')
  if [[ $result != "" ]];then
    echo "==> delete docker image: $(docker inspect $result --format='{{ .RepoTags }}') <=="
    docker rmi $result
  fi
}

function drc() {
  result=$(docker ps -a | fzf | awk '{print $1}')
  if [[ $result != "" ]];then
    echo "==> delete docker container: $(docker inspect $result --format='{{ .Name }}') <=="
    if [[ $1 == "--force" ]];then
      docker rm -f $result
    else
      docker rm $result
    fi
  fi
}
source "$HOME/.cargo/env"

export EDITOR="nvim"
